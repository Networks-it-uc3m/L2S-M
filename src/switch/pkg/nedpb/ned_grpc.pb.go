// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: ned.proto

package nedpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NedService_CreateVxlan_FullMethodName     = "/nedpb.NedService/CreateVxlan"
	NedService_AttachInterface_FullMethodName = "/nedpb.NedService/AttachInterface"
)

// NedServiceClient is the client API for NedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NedServiceClient interface {
	// Creates a VxLAN with the specified IP address.
	CreateVxlan(ctx context.Context, in *CreateVxlanRequest, opts ...grpc.CallOption) (*CreateVxlanResponse, error)
	// Attaches the specified interface to the bridge.
	AttachInterface(ctx context.Context, in *AttachInterfaceRequest, opts ...grpc.CallOption) (*AttachInterfaceResponse, error)
}

type nedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNedServiceClient(cc grpc.ClientConnInterface) NedServiceClient {
	return &nedServiceClient{cc}
}

func (c *nedServiceClient) CreateVxlan(ctx context.Context, in *CreateVxlanRequest, opts ...grpc.CallOption) (*CreateVxlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVxlanResponse)
	err := c.cc.Invoke(ctx, NedService_CreateVxlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nedServiceClient) AttachInterface(ctx context.Context, in *AttachInterfaceRequest, opts ...grpc.CallOption) (*AttachInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachInterfaceResponse)
	err := c.cc.Invoke(ctx, NedService_AttachInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NedServiceServer is the server API for NedService service.
// All implementations must embed UnimplementedNedServiceServer
// for forward compatibility.
type NedServiceServer interface {
	// Creates a VxLAN with the specified IP address.
	CreateVxlan(context.Context, *CreateVxlanRequest) (*CreateVxlanResponse, error)
	// Attaches the specified interface to the bridge.
	AttachInterface(context.Context, *AttachInterfaceRequest) (*AttachInterfaceResponse, error)
	mustEmbedUnimplementedNedServiceServer()
}

// UnimplementedNedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNedServiceServer struct{}

func (UnimplementedNedServiceServer) CreateVxlan(context.Context, *CreateVxlanRequest) (*CreateVxlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVxlan not implemented")
}
func (UnimplementedNedServiceServer) AttachInterface(context.Context, *AttachInterfaceRequest) (*AttachInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachInterface not implemented")
}
func (UnimplementedNedServiceServer) mustEmbedUnimplementedNedServiceServer() {}
func (UnimplementedNedServiceServer) testEmbeddedByValue()                    {}

// UnsafeNedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NedServiceServer will
// result in compilation errors.
type UnsafeNedServiceServer interface {
	mustEmbedUnimplementedNedServiceServer()
}

func RegisterNedServiceServer(s grpc.ServiceRegistrar, srv NedServiceServer) {
	// If the following call pancis, it indicates UnimplementedNedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NedService_ServiceDesc, srv)
}

func _NedService_CreateVxlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVxlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NedServiceServer).CreateVxlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NedService_CreateVxlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NedServiceServer).CreateVxlan(ctx, req.(*CreateVxlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NedService_AttachInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NedServiceServer).AttachInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NedService_AttachInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NedServiceServer).AttachInterface(ctx, req.(*AttachInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NedService_ServiceDesc is the grpc.ServiceDesc for NedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nedpb.NedService",
	HandlerType: (*NedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVxlan",
			Handler:    _NedService_CreateVxlan_Handler,
		},
		{
			MethodName: "AttachInterface",
			Handler:    _NedService_AttachInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ned.proto",
}
